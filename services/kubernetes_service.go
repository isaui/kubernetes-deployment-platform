package services

import (
	"fmt"
	"io/ioutil"
	"os"
	"os/exec"
	"path/filepath"
	
	"github.com/isabu/pendeploy-handal/models"
)

// KubernetesService menangani operasi terkait kubernetes
type KubernetesService struct {
	// Nantinya bisa ditambahkan dependensi ke repository, logger, dll.
	KubectlPath string // Path ke executable kubectl
}

// NewKubernetesService membuat instance baru dari KubernetesService
func NewKubernetesService() *KubernetesService {
	// Check if kubectl is in PATH
	kubectlPath, err := exec.LookPath("kubectl")
	if err != nil {
		kubectlPath = "kubectl" // Default to just the name if not found
	}
	
	return &KubernetesService{
		KubectlPath: kubectlPath,
	}
}

// GenerateDeployScript membuat script untuk menerapkan manifests Kubernetes
func (s *KubernetesService) GenerateDeployScript(repoDir string, buildResult *models.BuildImageResult) (string, error) {
	// Periksa apakah folder kubernetes ada
	kubeDir := filepath.Join(repoDir, "kubernetes")
	if _, err := os.Stat(kubeDir); os.IsNotExist(err) {
		return "", fmt.Errorf("kubernetes directory not found in repository")
	}
	
	// Buat script untuk menerapkan manifests
	scriptContent := fmt.Sprintf(`#!/bin/bash

# Script generated by pendeploy-handal
# Image: %s:%s

# Export image info untuk manifests kubernetes
export APP_IMAGE="%s:%s"
export APP_NAME="%s"
export APP_CONTAINER_ID="%s"

# Apply semua manifest di direktori kubernetes
echo "Applying Kubernetes manifests from %s/kubernetes with APP_IMAGE=$APP_IMAGE"
kubectl apply -f %s/kubernetes/

echo "Deployment applied successfully!"
`, 
	buildResult.ImageName, buildResult.ImageTag,
	buildResult.ImageName, buildResult.ImageTag,
	buildResult.ImageName, buildResult.ContainerID,
	repoDir, repoDir)
	
	// Simpan script
	scriptPath := filepath.Join(repoDir, "deploy.sh")
	if err := ioutil.WriteFile(scriptPath, []byte(scriptContent), 0755); err != nil {
		return "", fmt.Errorf("failed to write deploy script: %w", err)
	}
	
	return scriptPath, nil
}

// ApplyKubernetesManifests menerapkan manifests Kubernetes secara langsung
func (s *KubernetesService) ApplyKubernetesManifests(repoDir string, buildResult *models.BuildImageResult) (string, error) {
	// Periksa apakah folder kubernetes ada
	kubeDir := filepath.Join(repoDir, "kubernetes")
	if _, err := os.Stat(kubeDir); os.IsNotExist(err) {
		return "", fmt.Errorf("kubernetes directory not found in repository")
	}
	
	// Set environment variables untuk kubectl
	cmd := exec.Command(s.KubectlPath, "apply", "-f", kubeDir)
	cmd.Env = append(os.Environ(), 
		fmt.Sprintf("APP_IMAGE=%s:%s", buildResult.ImageName, buildResult.ImageTag),
		fmt.Sprintf("APP_NAME=%s", buildResult.ImageName),
		fmt.Sprintf("APP_CONTAINER_ID=%s", buildResult.ContainerID),
	)
	
	// Jalankan kubectl apply
	output, err := cmd.CombinedOutput()
	if err != nil {
		return string(output), fmt.Errorf("kubectl apply failed: %w\n%s", err, string(output))
	}
	
	return string(output), nil
}

// RunDeploymentScript menjalankan script deployment yang telah dibuat
func (s *KubernetesService) RunDeploymentScript(scriptPath string) (string, error) {
	// Periksa apakah script ada
	if _, err := os.Stat(scriptPath); os.IsNotExist(err) {
		return "", fmt.Errorf("deployment script not found: %s", scriptPath)
	}
	
	// Pastikan script executable
	if err := os.Chmod(scriptPath, 0755); err != nil {
		return "", fmt.Errorf("failed to make script executable: %w", err)
	}
	
	// Jalankan script deployment
	cmd := exec.Command("bash", scriptPath)
	cmd.Dir = filepath.Dir(scriptPath) // Set working directory to script location
	
	// Tambahkan output live logging
	fmt.Printf("Running deployment script: %s\n", scriptPath)
	
	// Jalankan script
	output, err := cmd.CombinedOutput()
	if err != nil {
		return string(output), fmt.Errorf("deployment script failed: %w\n%s", err, string(output))
	}
	
	return string(output), nil
}
